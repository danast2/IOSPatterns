import Cocoa

//Вы заметили как много в нашей жизни шаблонов? Ну к примеру – наше поведение
//когда мы приходим в незнакомый дом:
//1. Зайти
//2. Поздороваться с хозяевами
//3. Раздеться, молясь о том что у нас носки не дырявые
//4. Пройти, и охать удивляясь какая большая/уютная/забавная квартира.
//Или же когда мы приходим в квартиру, где происходит ремонт:
//1. Зайти
//2. Поздороваться с хозяевами
//3. Не разуваться, потому как грязно!
//4. Поохать когда хозяин квартиры поведает нам смелость его архитектурной
//мысли!
//В целом, все происходит практически одинаково, но с изюминкой в каждом
//различно случае:) Наверное потому то, это и называется шаблоном поведения.
//Шаблонный метод задает алгоритму пошаговоую инструкцию. Элементы
//алгоритма же, определяются в наследующих класах.
//Сам паттерн ну очень интуитивный, и я уверен что многие давно уже
//использовали его. Потому давайте попробуем сделать пример.
//Вернемся к старой практике, писать примеры по созданию телефонов!
//Итак, напишем наш шаблонный класс, с помощью которого будем
//создавать телефон:


class AnyPhoneTemplate {
    func makePhone() {
        takeBox()
        takeCamera()
        takeMicrophone()
        assemble()
    }
    func takeBox() {
        print("Taking a box")
    }
    func takeCamera() {
        print("Taking a camera")
    }
    func takeMicrophone() {
        print("Taking a microphone")
    }
    func assemble() {
        print("Assembling everythig")
    }
}


//Как вы уже наверное догадались – сам шаблонный метод, это метод makePhone –
//который задает последовательность вызовов методов необходимых для
//складывания телефонов. Давайте теперь научим нашу программу создавать
//айфоны:

class iPhoneMaker: AnyPhoneTemplate {

    func design() {
        print("Putting label 'Designed in California'")
    }

    override func takeBox() {
        design()
        super.takeBox()
    }
}

//Как видим у сборщика яблочных телефонов есть один дополнительный метод –
//design, а также перегруженный метод takeBox в котором дополнительно
//вызывается метод design и после этого вызывается родительский метод takeBox.
//На очереди сборка Android:

class AndroidMaker: AnyPhoneTemplate {

    func addRam() {
        print("Installing 2Gigs of RAM")
    }
    func addCPU() {
        print("Installing 4 more CPUs")
    }

    override func assemble() {
        addRam()
        addCPU()
        super.assemble()
    }
}

//Как видим у сборщика андроида аж целых два дополнительных метода, и
//перегружен метод assemble.
//Тест здесь конечно же – элементарный:

let android = AndroidMaker()
let iPhine = iPhoneMaker()
android.makePhone()
iPhine.makePhone()
