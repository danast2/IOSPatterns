import Cocoa

//Я задумался, как объяснить да и перевести этот паттерн на примеры из реальной
//жизни, и потерпел полнейшее фиаско! Потому сразу к описанию и примерам!
//Flyweight – паттерн который помогает нам отделять определенную информацию,
//для того чтобы в будущем делиться этой информацией с многими объектами.
//Как пример возьмем любую стратегическую игру – представьте что у вас 1 тысяча
//солдат одного типа – если каждый будет лезть на диск и пробовать подгрузить
//картинку с диска – вероятнее всего у вас или память закончится или
//производительность будет желать лучшего. Очень классно этот пример
//рассмотрен в книге Андрея Будая ”Дизайн-патерни — просто, як двері”.
//Потому не найдя ничего лучше, я решил просто портировать пример.
//Когда использовать этот паттерн?
//1. У вас ооочень много однотипных объектов в приложении
//2. Много объектов сохранены в памяти, от чего производительность вашего
//приложения страдает
//3. Вы видите, что несколько объектов которые могут быть разшарены – спасут
//вас от создания тонны других объектов
//Итак пример:
//Пускай мы пишем игру, где есть два типа персонажей – гоблины и драконы. Для
//начала создадим базовый класс для всех юнитов:

typealias PseudoImage = String
protocol BasicUnit {
    var name: String { get }
    var health: Int { get }
    var image: PseudoImage { get }
}

//Как видим у каждого юнита есть свойство image – которое является типом
//и может потребовать подгрузки картинки для каждого юнита. Как же сделать
//загрузку только единожды? Ну собственно с этим то и справится наш паттерн!

class FlyweightImageFactory {

    private static var imageDictionary = [String: PseudoImage]()

    class func getImage(name: String) -> PseudoImage {
        if imageDictionary[name] == nil {
            imageDictionary[name] = "Image" + name
            print("Loading image of the " + name)
        }
        return imageDictionary[name]!
    }
}

//Как видим, наш flyweight иммет только один класс метод, который картинку по имени
//то и возвращает. Если картинки под таким именем нету в его словаре – то
//она грузится из бандла, если же есть – то просто передается ссылка на нее.
//Каждый раз когда картинка грузится из бандла мы логируем сообщение, это
//сделано для того чтобы увидеть сколько раз происходит подгрузка изображения
//из бандла.
//Теперь нам просто нужно в конструкторе наших юнитов загружать картинку не на
//прямую, а через наш паттерн:

class Dragon: BasicUnit {
    var name = "Dragon"
    var health = 150
    var image = FlyweightImageFactory.getImage(name: "dragon")
}
class Goblin: BasicUnit {
    var name = "Goblin"
    var health = 20
    var image = FlyweightImageFactory.getImage(name: "goblin")
}

//Ну и конечно же тест:

var units = [BasicUnit]()
for _ in 0..<500 {
 units.append(Dragon())
}
for _ in 0..<500 {
 units.append(Goblin())
}
