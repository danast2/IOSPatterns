import Cocoa

//Классный пример декоратора – различные корпуса для новых телефонов. Как-то я
//сразу с конца начал:) Для начала у нас есть телефон. Но так как телефон дорогой,
//мы будем очень счастливы если он не разобьется при любом падении – потому мы
//покупаем чехол для него. То есть, к уже существующему предмету мы добавили
//функционал защиты от падения. Ну еще мы взяли стильный чехол – теперь наш
//телефон еще и выглядит отлично. А потом мы докупили съемный
//объектив, с помощью которого можно делать фотографии с эффектом “рыбьего
//глаза”. Декорировали наш телефон дополнительным функционалом:)
//Вот, приблизительно так выглядит реально описание паттерна декоратор. Теперь
//описание GoF:
//Декоратор добавляет некий функционал уже существующему объекту.
//Когда использовать этот паттерн:
//1. Вы хотите добавить определенному объекту дополнительные возможности,
//при этом не задевая и не меняя других объектов
//2. Дополнительные возможности класс – опциональный
//Радость в данном случае – это использование категорий. Я не буду
//детально описывать категории в этой книге, но в двух словах все же расскажу:
//Категории – это возможность расширить любой объект дополнительными
//методами без унаследования от него. Давайте возьмем супер
//простой пример – декорирование Cocoa классов. К примеру добавим новый
//метод для объекта NSDate:
//К примеру, нам нужно иметь возможность любую дату в нашем приложении как то
//определенно отформатировать и получить в виде строчки. Для начала создадим
//категорию:


extension Date {
    var convertDateToString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy/dd/MM"
        return formatter.string(from: self)
    }
}

//Как видим наша категория определяет только один метод “convertDateToString”,
//который дату форматирует в какой-то совсем странный формат, но у нас такая
//задача:)


//в принципе вот и все:) Примерный код тестирования
//выглядит следующим образом:

let dateNow = Date()
print("Date is \(dateNow.convertDateToString)")
